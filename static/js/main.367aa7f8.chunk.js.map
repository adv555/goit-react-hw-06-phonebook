{"version":3,"sources":["components/Section/Section.module.scss","components/Filter/Filter.module.scss","components/Header/Header.module.scss","redux/actions.js","redux/reducer.js","redux/store.js","components/Header/Header.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactList/ContactList.module.scss","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","items","createReducer","state","action","some","alert","getNewContact","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistor","persistStore","Header","title","children","className","s","AppHeader","Section","Title","FormSection","Form","dispatch","useDispatch","useState","setName","setNumber","handleChange","e","currentTarget","value","reset","nameInputId","numberInputId","onSubmit","preventDefault","Group","type","pattern","required","onChange","htmlFor","Btn","getFilter","getVisibleContacts","getContacts","normalizedFilter","toLowerCase","includes","ContactList","useSelector","contactList","map","contactListItem","text","btn","onClick","Filter","FilterLabel","FilterInput","target","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.367aa7f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__CqcNT\",\"Title\":\"Section_Title__3JdV3\",\"FormSection\":\"Section_FormSection__26CAb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FilterInput\":\"Filter_FilterInput__3kH4y\",\"FilterLabel\":\"Filter_FilterLabel__31TZv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"Header_AppHeader__1safz\"};","import shortid from 'shortid';\n// import types from 'redux/types';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/filter');\n\nexport { addContact, deleteContact, changeFilter };\n\n/** Without Redux Toolkit \n \n const addContact = (name, number) => ({\n  type: types.ADD,\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n});\n  \nconst deleteContact = id => ({\n  type: types.DELETE,\n  payload: id,\n});\n\nconst changeFilter = value => ({\n  type: types.CHANGE_FILTER,\n  payload: value,\n}); \n\n*/\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\n// import types from 'redux/types';\nimport { addContact, deleteContact, changeFilter } from 'redux/actions';\n\nconst initialContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nfunction getNewContact(state, { payload }) {\n  const existContact = state.some(({ name }) => name === payload.name);\n  return !existContact ? [...state, payload] : alert(`${payload.name} is already in the contact`);\n}\n\nconst items = createReducer(initialContacts, {\n  [addContact]: (state, action) => getNewContact(state, action),\n  [deleteContact]: (state, { payload }) => state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n/** Without Redux Toolkit \n \n  const initialContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst items = (state = initialContacts, { type, payload }) => {\n  switch (type) {\n    case types.ADD:\n      const existContact = state.some(({ name }) => name === payload.name);\n\n      return !existContact\n        ? [...state, payload]\n        : alert(`${payload.name} is already in the contact`);\n\n    case types.DELETE:\n      return state.filter(({ id }) => id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = '', { type, payload }) => {\n  switch (type) {\n    case types.CHANGE_FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n*/\n","import { configureStore } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport contactsReducer from 'redux/reducer';\n\nconst contactsPersistConfig = {\n  key: ' Contacts List',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n    logger,\n  ],\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n\n/* without toolkit */\n\n// const rootReduser = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReduser, composeWithDevTools());\n","import PropTypes from 'prop-types';\nimport s from 'components/Header/Header.module.scss';\nfunction Header({ title, children }) {\n  return (\n    <header className={s.AppHeader}>\n      <div className=\"Container\">\n        <h1>{title}</h1>\n        {children}\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport s from 'components/Section/Section.module.scss';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={`Container ${s.Section}`}>\n      <h2 className={s.Title}>{title}</h2>\n      <div className={s.FormSection}>{children}</div>\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport shortid from 'shortid';\nimport s from 'components/ContactForm/ContactForm.module.scss';\nimport { addContact } from 'redux/actions';\n\nexport default function Form() {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n\n      case 'number':\n        return setNumber(value);\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact(name, number));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    <div>\n      <form className={s.Form} onSubmit={handleSubmit}>\n        <div className={s.Group}>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            id={nameInputId}\n            onChange={handleChange}\n          />\n          <label htmlFor={nameInputId}>Name</label>\n          <div className=\"bar\"></div>\n        </div>\n\n        <div className={s.Group}>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            id={numberInputId}\n            onChange={handleChange}\n          />\n          <label htmlFor={numberInputId}>Number</label>\n          <div className=\"bar\"></div>\n        </div>\n        <button className={s.Btn} type=\"submit\">\n          add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\n// With import { connect } from 'react-redux';\n\n/** const mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form); */\n","export const getFilter = state => state.contacts.filter;\nexport const getContacts = state => state.contacts.items;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/actions';\nimport { getVisibleContacts } from 'redux/selectors';\n\nimport s from './ContactList.module.scss';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <ul className={s.contactList}>\n        {contacts.map(({ id, name, number }) => {\n          return (\n            <li className={s.contactListItem} id={id} key={id}>\n              <p className={s.text}>{name}</p>\n              <p className={s.text}>{number}</p>\n              <button className={s.btn} type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n                delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\n// With import { connect } from 'react-redux';\n\n/**\n  const getFilterContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getFilterContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n */\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/actions';\nimport { getFilter } from 'redux/selectors';\nimport s from 'components/Filter/Filter.module.scss';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.FilterLabel} htmlFor=\"\">\n      Filter contacts by name\n      <input\n        className={s.FilterInput}\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n}\n\n// With import { connect } from 'react-redux';\n\n/**\n const mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n */\n","import 'styles/shared.scss';\nimport Header from 'components/Header';\nimport Section from 'components/Section';\nimport Form from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n// import { useLocalStorage } from 'hooks/useLocalStorage';\n\nexport default function App() {\n  // const [contacts, setContacts] = useLocalStorage('contacts', initialContacts);\n\n  return (\n    <div className=\"App\">\n      <Header title={'PhoneBook'}>\n        <Filter />\n      </Header>\n      <Section title={'Contacts'}>\n        <Form />\n        <ContactList />\n      </Section>\n    </div>\n  );\n}\n\n// const [contacts, setContacts] = useState(\n//   JSON.parse(window.localStorage.getItem('contacts:')) ?? initialContacts,\n// );\n// const [filter, setFilter] = useState('');\n\n// useEffect(() => {\n//   window.localStorage.setItem('contacts:', JSON.stringify(contacts));\n// }, [contacts]);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from 'redux/store';\n\n// import { myAction, myAction2 } from 'redux/action';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__9FkvI\",\"contactListItem\":\"ContactList_contactListItem__1SkBv\",\"text\":\"ContactList_text__2FkQ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__pmdyI\",\"Btn\":\"ContactForm_Btn__3RNXk\",\"Group\":\"ContactForm_Group__2kBuf\"};"],"sourceRoot":""}